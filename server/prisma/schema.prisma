generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//--------------------- Users ----------------------//

model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  auth0Id          String      @unique
  firstName        String?
  lastName         String?
  email            String      @unique
  phone            String?     // Added: User's phone number
  profileRole      String?     // Added: User's role/title (e.g. "Landivo Expert")
  avatarUrl        String?     // Added: Profile image path
  allowedProfiles  String[]    // Added: Array of profile IDs this user can use
  isActive         Boolean     @default(true)
  lastLoginAt      DateTime?
  loginCount       Int         @default(0)

  // Existing relations and fields
  createdResidencies   Residency[]      @relation("CreatedByRelation")
  updatedResidencies   Residency[]      @relation("UpdatedByRelation")
  createdBuyers        Buyer[]          @relation("CreatedByBuyerRelation")
  updatedBuyers        Buyer[]          @relation("UpdatedByBuyerRelation")
  createdDeals         Deal[]           @relation("CreatedByDealRelation")
  updatedDeals         Deal[]           @relation("UpdatedByDealRelation")
  updatedQualifications Qualification[] @relation("UpdatedByQualificationRelation")
  activityLogs ActivityLog[] @relation("UserActivityLogs")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//---------------------- Activity Log ----------------------//

model ActivityLog {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  entityType  String // 'Residency', 'Buyer', 'Deal', etc.
  entityId    String
  actionType  String // 'create', 'update', 'delete', 'view', etc.
  userId      String @db.ObjectId
  user        User   @relation("UserActivityLogs", fields: [userId], references: [id])
  
  // Store the changes as JSON
  previousData Json?
  newData      Json?
  
  details     String?
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([actionType])
  @@index([createdAt])
}

//---------------------- Property ----------------------//

model Residency {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Audit fields
  createdById  String  @db.ObjectId
  createdBy    User    @relation("CreatedByRelation", fields: [createdById], references: [id])
  updatedById  String? @db.ObjectId
  updatedBy    User?   @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  
  // Track all modifications
  modificationHistory Json? // Array of modification events
  
  //Deals
  deals     Deal[]
  
  // 1. System Information
  ownerId            Int?
  area               String
  status             String
  featured           String?

  // 2. Listing Details
  title              String
  description        String
  notes              String?

  // 3. Property Classification
  type               String?
  landType           String[]
  zoning             String
  restrictions       String?
  survey             String?
  legalDescription   String?
  mobileHomeFriendly String?

  //4. Location & Identification
  streetAddress String
    // Display
  toggleObscure Boolean @default(false)
  //
  city          String
  county        String
  state         String
  zip           String
  latitude      Float // Latitude for geolocation
  longitude     Float // Longitude for geolocation
  apnOrPin      String // @unique // APN/PIN must be unique
  direction     String?
  landId        Boolean @default(false)
  landIdLink    String?

  //5. Property Size & Dimensions
  sqft      Int?
  acre      Float

//6. Pricing
  askingPrice   Float
  minPrice      Float
  disPrice      Float
  hoaPoa        String
  hoaFee        Float?
  hoaPaymentTerms String?
  tax           Float?

//7. Financing & Pricing Calculations
  financing           String
  financingTwo        String?
  financingThree      String?
  serviceFee          Float?
  term                Int?
  hoaMonthly          Float?
  interestOne         Float?
  interestTwo         Float?
  interestThree       Float?
  monthlyPaymentOne   Float?
  monthlyPaymentTwo   Float?
  monthlyPaymentThree Float?
  downPaymentOne      Float?
  downPaymentTwo      Float?
  downPaymentThree    Float?
  loanAmountOne       Float?
  loanAmountTwo       Float?
  loanAmountThree     Float?
  purchasePrice       Float?
  financedPrice       Float?

  // 8. Utilities and Infrastructure
  water         String?
  sewer         String?
  electric      String?
  roadCondition String?
  floodplain    String?

  //9. CMA fields
  hasCma         Boolean  @default(false)
  cmaData        String?
  cmaFilePath    String?

  //10. Media & Tags
  imageUrls Json?
  videoUrls Json?
  ltag      String?
  rtag      String?

  // Miscellaneous
  viewCount Int?    @default(0) // View count for unique views

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

    // Add profile ID field
  profileId        String? // ID of the profile used for this property

  // Unique Constraints
  @@unique(fields: [apnOrPin, streetAddress, city, state]) // Modified to remove userEmail
  @@unique(fields: [latitude, longitude]) // Ensure no duplicate geolocations
}

//---------------------- Offer ----------------------//



model Offer {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  propertyId      String
  offeredPrice    Float
  counteredPrice  Float?       // Added field for counter offers
  timestamp       DateTime     @default(now())
  buyerId         String       @db.ObjectId
  buyer           Buyer        @relation("BuyerOffers", fields: [buyerId], references: [id])
  offerStatus     OfferStatus  @default(PENDING) // Added status enum
  
  // Message fields
  buyerMessage    String?
  sysMessage      String?
  
  // History tracking
  offerHistory    Json[]       // Array of status changes with timestamps and messages
  
  // Audit fields
  createdById     String?      @db.ObjectId
  updatedById     String?      @db.ObjectId
  updatedAt       DateTime     @updatedAt
  
  // Track modifications
  modificationHistory Json?
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTERED
  EXPIRED
}

//---------------------- Buyer ----------------------//

model Buyer {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          // @unique
  phone          String?         // @unique
  buyerType      BuyerType?
  firstName      String?
  lastName       String?
  source         String?
  preferredAreas String[]
  offers         Offer[]         @relation("BuyerOffers")
  auth0Id        String?

  // Email List fields
  emailStatus           String?     // "available" or "unsubscribe"
  emailPermissionStatus String?
  emailListMemberships  BuyerEmailList[] @relation("BuyerEmailLists")
  
  // Audit fields
  createdById    String?         @db.ObjectId
  createdBy      User?           @relation("CreatedByBuyerRelation", fields: [createdById], references: [id])
  updatedById    String?         @db.ObjectId
  updatedBy      User?           @relation("UpdatedByBuyerRelation", fields: [updatedById], references: [id])
  
  // Track modifications
  modificationHistory Json?
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deals          Deal[]
  activities     BuyerActivity[] @relation("BuyerActivities")
}

//---------------------- Email List ----------------------//

model EmailList {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  source        String?
  createdBy     String?   @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastEmailDate DateTime?

  // Criteria for automatic membership
  criteria Json?

  // Members through join table
  buyerMemberships BuyerEmailList[] @relation("EmailListBuyers")

  // Additional metadata
  isDefault Boolean @default(false)
  color     String?
  
  // Track modifications
  modificationHistory Json?
}

//---------------------- Join Table ----------------------//

model BuyerEmailList {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  buyerId     String    @db.ObjectId
  buyer       Buyer     @relation("BuyerEmailLists", fields: [buyerId], references: [id])
  emailListId String    @db.ObjectId
  emailList   EmailList @relation("EmailListBuyers", fields: [emailListId], references: [id])
  joinedAt    DateTime  @default(now())
  
  @@unique([buyerId, emailListId])
  @@index([buyerId])
  @@index([emailListId])
}

enum BuyerType {
  CashBuyer
  Builder
  Developer
  Realtor
  Investor
  Wholesaler
}

//---------------------- Activity ----------------------//

model BuyerActivity {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  buyerId         String   @db.ObjectId
  buyer           Buyer    @relation("BuyerActivities", fields: [buyerId], references: [id])
  eventType       String // e.g., property_view, click, search, offer_submission, page_view, session_start
  timestamp       DateTime @default(now())
  eventData       Json? // Flexible structure for different event types
  sessionId       String? // To group activities in a session
  page            String? // URL or path where the event occurred
  propertyId      String? // Reference to property when relevant
  interactionType String? // Type of interaction (e.g., button, link, etc.)
  ipAddress       String? // IP address for security tracking
  userAgent       String? // Browser/device info

  // Create indexes for faster lookups
  @@index([buyerId])
  @@index([eventType])
  @@index([timestamp])
  @@index([propertyId])
  @@index([sessionId])
}

//---------------------- Qualifcations----------------------//

model Qualification {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  propertyId     String? // ID of the property being qualified for
  propertyPrice  Float // Asking or financed price
  ownerId        Int?
  loanAmount     Float? // Selected loan amount
  interestRate   Float? // Selected interest rate
  monthlyPayment Float? // Calculated monthly payment
  downPayment    Float? // Selected down payment amount
  term           Int? // Loan term in months


// Audit fields
 updatedById    String?  @db.ObjectId
 updatedBy      User?    @relation("UpdatedByQualificationRelation", fields: [updatedById], references: [id])
  
  // Track modifications
  modificationHistory Json?

  // Survey answers
  language               String?
  homeUsage              String? // Primary residence, Secondary/Vacation, Investment
  realEstateAgent        String? // Yes/No
  homePurchaseTiming     String? // When they plan to purchase
  currentHomeOwnership   String? // Current living situation
  currentOnAllPayments   String? // Yes/No
  employmentStatus       String? // Employed, Self-Employed, Not Employed, Retired
  verifyIncome           String? // Yes/No can verify income
  incomeHistory          String? // Has 2-year income history
  openCreditLines        String? // Yes/No has open credit lines
  totalMonthlyPayments   Float? // Their current debt payments
  grossAnnualIncome      String? // Income range
  foreclosureForbearance String? // Yes/No in foreclosure
  declaredBankruptcy     String? // Yes/No bankruptcy
  currentCreditScore     String? // Credit score range
  liensOrJudgments       String? // Yes/No has liens

  // Personal information
  firstName String
  lastName  String
  email     String
  phone     String

  // Status
  qualified              Boolean @default(false)
  disqualificationReason String?

  // Property info passed from Landivo
  propertyAddress String?
  propertyCity    String?
  propertyState   String?
  propertyZip     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//---------------------- Deals ----------------------//

model Deal {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  buyerId    String    @db.ObjectId
  buyer      Buyer     @relation(fields: [buyerId], references: [id])
  propertyId String    @db.ObjectId
  property   Residency @relation(fields: [propertyId], references: [id])

  // Audit fields
  createdById  String   @db.ObjectId
  createdBy    User     @relation("CreatedByDealRelation", fields: [createdById], references: [id])
  updatedById  String?  @db.ObjectId
  updatedBy    User?    @relation("UpdatedByDealRelation", fields: [updatedById], references: [id])
  
  // Track modifications
  modificationHistory Json?

  // Core financial details
  purchasePrice  Float
  salePrice      Float
  downPayment    Float?
  loanAmount     Float?
  interestRate   Float?
  term           Int?
  monthlyPayment Float?

  // Acquisition details
  closingCosts       Float?
  transferTaxes      Float?
  appraisalValue     Float?
  loanOriginationFee Float?
  financingType      String?

  // Status tracking
  status         DealStatus @default(ACTIVE)
  startDate      DateTime
  completionDate DateTime?

  // Payment tracking
  paymentsReceived Int?   @default(0)
  paymentsOnTime   Int?   @default(0)
  paymentsLate     Int?   @default(0)
  totalPaidToDate  Float? @default(0)
  principalPaid    Float? @default(0)
  interestPaid     Float? @default(0)

  // Performance metrics
  totalExpectedRevenue Float?
  currentRevenue       Float?  @default(0)
  profitLoss           Float?  @default(0)
  capRate              Float?
  cashOnCashReturn     Float?

  // Additional data
  notes     String?
  documents String[] @default([])

  // Payment history
  payments Payment[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  dealId String @db.ObjectId
  deal   Deal   @relation(fields: [dealId], references: [id])

  paymentNumber Int
  amount        Float
  dueDate       DateTime
  paymentDate   DateTime?
  status        PaymentStatus @default(PENDING)
  principal     Float
  interest      Float
  lateFee       Float?
  
  // Audit fields
  createdById  String?  @db.ObjectId
  updatedById  String?  @db.ObjectId
  
  // Track modifications
  modificationHistory Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DealStatus {
  PENDING
  ACTIVE
  COMPLETED
  DEFAULTED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  LATE
  MISSED
}

//---------------------- Display ----------------------//

model PropertyRow {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  rowType      String?   // e.g. "featured", "homepage"
  sort         String?   // Price, Date, 
  displayOrder String[] // Array of property IDs in order
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

//---------------------- Settings ----------------------//

model Settings {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  overrideContactPhone    String?
  
  // SMTP Configuration
  smtpServer              String?
  smtpPort                String?
  smtpUser                String?
  smtpPassword            String?
  
  // Offer Email Notification Settings
  enableOfferEmails       Boolean   @default(false)
  offerEmailRecipients    String[]  @default([])
  
  // Financing Email Notification Settings
  enableFinancingEmails   Boolean   @default(false)
  financingEmailRecipients String[] @default([])
  
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

//---------------------- Visitor Tracking ----------------------//

// Visitor tracking models
model Visitor {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  visitorId      String    @unique // Client-side generated ID
  firstVisit     DateTime  @default(now())
  lastVisit      DateTime  @default(now())
  totalVisits    Int       @default(1)
  country        String?
  region         String?
  deviceType     String?   // mobile, tablet, desktop
  browser        String?
  os             String?
  visits         Visit[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Visit {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  visitorId      String
  visitor        Visitor   @relation(fields: [visitorId], references: [visitorId])
  sessionId      String    // Unique session ID
  startTime      DateTime  @default(now())
  endTime        DateTime?
  duration       Int?      // Duration in seconds
  pagesViewed    Int       @default(1)
  entryPage      String
  exitPage       String?
  referrer       String?
  userAgent      String?
  ipAddress      String?
  screenSize     String?

  @@index([visitorId])
  @@index([startTime])
}

model VisitorStat {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  date            DateTime  @unique
  uniqueVisitors  Int       @default(0)
  totalVisits     Int       @default(0)
  newVisitors     Int       @default(0)
  returningVisitors Int      @default(0)
  topPages        Json?
  deviceBreakdown Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}